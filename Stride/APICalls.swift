//
//  APICalls.swift
//  Stride
//
//  Created by Madhu Ramkumar on 5/31/23.
//

import SpotifyiOS
import Foundation
import SwiftUI

struct RecommendationSeedObject: Codable, Hashable {
    var href: String
    var id: String
}

struct Song: Codable, Hashable {
    var seeds: [RecommendationSeedObject]
    var tracks: [TrackObject]
}

struct TrackObject: Codable, Hashable {
    var href: String
    var id: String
}

struct ArtistObject: Codable, Hashable {
    var href: String
    var id: String
}

struct UserTopArtists: Codable {
    var href: String
    var items: [ArtistObject]
}

struct UserTopTracks: Codable {
    var href: String
    var items: [TrackObject]
}

struct Error: Codable {
    var status: Int
    var message: String
}

struct Genres: Codable {
    var genres: [String]
}

struct Recommendations: Codable {
    var tracks: [TrackObject]
}

struct UserInfo: Codable {
    var id: String
    
}

class APICalls: ObservableObject {
    let token = "BQBp0yOgXsx8V9LBcs0P4I8LZgK3m8Rw46sYo59iEkjhXZs9Lu8HpqaDobHf26Jsi1z16w8VYK0zLUW-nYf0g4uDhs5z6aiNzJsbrfOnv5mJMZeKaSfL02jOWTn8p2HhQGz5wtvesaYBDfSZJ9MgK5iILYYhkFdLkrV4pwns41_ddy2h7LZDGYa5nHfF_9hmtyTYvAKCazLOt6ef7POa15vOwXlExc5Z9rB7BgflMbrEjIPrvZwzC68kKk5Adr0cfAo8uxz0YIsjgNCvSM1VgSzZN_U5qjCpLg"
    
    // updated in StartWorkoutView
    @Published var minBPM = ""
    @Published var maxBPM = ""
    @Published var workoutTime = ""
    
    // gathered from user data, generated by getTop endpoint
    @Published var seedArtists = ""
    @Published var seedTracks = ""
    @Published var seedGenres = ""
    @Published var recommendedTracks = ""
    @Published var userID = ""
    

    // generates seed artists for getRecommendations endpoint based on users top artists
    func generateSeedArtists() {
        guard let url = URL(string: "https://api.spotify.com/v1/me/top/artists") else { return }
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        let task = URLSession.shared.dataTask(with: request) {data, response, error in
            
//            // print out data for debugging purposes
//            if let data = data {
//                if let dataString = String(data: data, encoding: .utf8) {
//                    print("got dataString: \n\(dataString)")
//                }
//            }

            guard let data = data, error == nil else {
                print("Error: \(error?.localizedDescription ?? "Unknown error")")
                return
            }
            
            if let response = response as? HTTPURLResponse {
                if (response.statusCode == 200) {
                    // assigns response JSON to UserTopArtists struct
                    guard let topArtists = try? JSONDecoder().decode(UserTopArtists.self, from: data) else {
                        print("Error Decoding Top Artist Details from JSON")
                        return
                    }
                    self.convertSeedArtistsToString(topArtists.items)
                } else if (response.statusCode == 401) {
                    AuthorizationManager.authManager.refreshAuthentication()
                    // self.generateSeedArtists()
                } else {
                    guard let errorInfo = try? JSONDecoder().decode(Error.self, from: data) else {
                        print("Error decoding error message details from JSON")
                        return
                    }
                    print (errorInfo.message)
                }
            }
        }
        task.resume()
    }
    
    
    // helper function to put JSON into a string
    func convertSeedArtistsToString(_ artists: [ArtistObject]) {
        for seed in artists {
            seedArtists += seed.id
        }
    }

    // generates seed tracks for getRecommendations endpoint based on users top tracks
    func generateSeedTracks() {
        guard let url = URL(string: "https://api.spotify.com/v1/me/top/tracks") else { return }
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        let task = URLSession.shared.dataTask(with: request) {data, response, error in
            
//            // print out data for debugging purposes
//            if let data = data {
//                if let dataString = String(data: data, encoding: .utf8) {
//                    print("got dataString: \n\(dataString)")
//                }
//            }
            
            guard let data = data, error == nil else {
                print("Error: \(error?.localizedDescription ?? "Unknown error")")
                return
            }
            
            if let response = response as? HTTPURLResponse {
                if (response.statusCode == 200) {
                    // assigns response JSON to UserTopArtists struct
                    guard let topTracks = try? JSONDecoder().decode(UserTopTracks.self, from: data) else {
                        print("Error Decoding Top Track Details from JSON")
                        return
                    }
                    self.convertSeedTracksToString(topTracks.items)
                    
                } else if (response.statusCode == 401) {
                    AuthorizationManager.authManager.refreshAuthentication()
                    // self.generateSeedArtists()
                } else {
                    guard let errorInfo = try? JSONDecoder().decode(Error.self, from: data) else {
                        print("Error decoding error message details from JSON")
                        return
                    }
                    print (errorInfo.message)
                }
            }
        }
        task.resume()
    }
    
    // helper function to put JSON into a string
    func convertSeedTracksToString(_ tracks: [TrackObject]) {
        for seed in tracks {
            seedTracks += seed.id
        }
    }
    
    func generateSeedGenres() {
        guard let url = URL(string: "https://api.spotify.com/v1/recommendations/available-genre-seeds") else { return }
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        let task = URLSession.shared.dataTask(with: request) {data, response, error in
              
//            // print out data for debugging purposes
//            if let data = data {
//                if let dataString = String(data: data, encoding: .utf8) {
//                    print("got dataString: \n\(dataString)")
//                }
//            }
              
            guard let data = data, error == nil else {
                print("Error: \(error?.localizedDescription ?? "Unknown error")")
                return
            }
              
            if let response = response as? HTTPURLResponse {
                if (response.statusCode == 200) {
                      // assigns response JSON to UserTopArtists struct
                    guard let genreArray = try? JSONDecoder().decode(Genres.self, from: data) else {
                        print("Error Decoding Top Track Details from JSON")
                        return
                    }
                    self.convertSeedGenresToString(genreArray.genres)
                    
                } else if (response.statusCode == 401) {
                AuthorizationManager.authManager.refreshAuthentication()
                    // self.generateSeedArtists()
                } else {
                    guard let errorInfo = try? JSONDecoder().decode(Error.self, from: data) else {
                        print("Error decoding error message details from JSON")
                        return
                    }
                    print (errorInfo.message)
                }
            }
        }
        task.resume()
    }
    
    // helper function to put JSON into a string
    func convertSeedGenresToString(_ genres: [String]) {
        for seed in genres {
            seedGenres += seed
        }
        
    }

    func getSongRecommendations() {
        
        // create URL for API request
        var urlComponents = URLComponents(string: "https://api.spotify.com/v1/recommendations/available-genre-seeds")!
        urlComponents.queryItems = [// body
            URLQueryItem(name: "seed_artists", value: seedArtists),
            URLQueryItem(name: "seed_genres", value: seedGenres),
            URLQueryItem(name: "seed_tracks", value: seedTracks),
            URLQueryItem(name: "min_tempo", value: minBPM),
            URLQueryItem(name: "max_tempo", value: maxBPM)
        ]
        guard let url = urlComponents.url else {
            fatalError("Missing URL!")
        }
        
        // create API Request
        var request = URLRequest(url: url)
        request.addValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        
        let task = URLSession.shared.dataTask(with: request) {data, response, error in
              
            // print out data for debugging purposes
            if let data = data {
                if let dataString = String(data: data, encoding: .utf8) {
                    print("got dataString: \n\(dataString)")
                }
            }
              
            guard let data = data, error == nil else {
                print("Error: \(error?.localizedDescription ?? "Unknown error")")
                return
            }
              
            if let response = response as? HTTPURLResponse {
                if (response.statusCode == 200) {
                      // assigns response JSON to UserTopArtists struct
                    guard let recommendations = try? JSONDecoder().decode(Recommendations.self, from: data) else {
                        print("Error Decoding Recommendation Details from JSON")
                        return
                    }
                    self.convertRecommendedTracksToString(recommendations.tracks)
                    
                } else if (response.statusCode == 401) {
                AuthorizationManager.authManager.refreshAuthentication()
                    // self.generateSeedArtists()
                } else {
                    guard let errorInfo = try? JSONDecoder().decode(Error.self, from: data) else {
                        print("Error decoding error message details from JSON")
                        return
                    }
                    print (errorInfo.message)
                }
            }
        }
        task.resume()
    }
    
    func convertRecommendedTracksToString(_ recTracks: [TrackObject]) {
        for seed in recTracks {
            recommendedTracks += seed.id
        }
    }
    
    func getUserID() {
        guard let url = URL(string: "https://api.spotify.com/v1/me") else { return }
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        let task = URLSession.shared.dataTask(with: request) {data, response, error in

            // print out data for debugging purposes
            if let data = data {
                if let dataString = String(data: data, encoding: .utf8) {
                    print("got dataString: \n\(dataString)")
                }
            }

            guard let data = data, error == nil else {
                print("Error: \(error?.localizedDescription ?? "Unknown error")")
                return
            }

            if let response = response as? HTTPURLResponse {
                if (response.statusCode == 200) {
                      // assigns response JSON to UserTopArtists struct
                    guard let user = try? JSONDecoder().decode(UserInfo.self, from: data) else {
                        print("Error Decoding Top Track Details from JSON")
                        return
                    }
                    self.userID = user.id

                } else if (response.statusCode == 401) {
                AuthorizationManager.authManager.refreshAuthentication()
                    // self.generateSeedArtists()
                } else {
                    guard let errorInfo = try? JSONDecoder().decode(Error.self, from: data) else {
                        print("Error decoding error message details from JSON")
                        return
                    }
                    print (errorInfo.message)
                }
            }
        }
        task.resume()

    }

    // create playlist of recommended songs whose length = specified workout time
    func createPlaylist() {



    }

    // when workout started, play playlist
    func playSong() {

    }
    
    // when workout ended automatically or by user, end playlist
    func endSong() {
        
    }
    
    // invoked if user agrees to save playlist to libary after workout finishes
    func savePlaylistToLibrary() {
        
    }
    
    
}
