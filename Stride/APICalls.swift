//
//  APICalls.swift
//  Stride
//
//  Created by Madhu Ramkumar on 5/31/23.
//

import SpotifyiOS
import Foundation
import SwiftUI

struct RecommendationSeedObject: Codable, Hashable {
    var href: String
    var id: String
}

struct Song: Codable, Hashable {
    var seeds: [RecommendationSeedObject]
    var tracks: [TrackObject]
}

struct TrackObject: Codable, Hashable {
    var href: String
    var id: String
}

struct ArtistObject: Codable, Hashable {
    var href: String
    var id: String
}

struct UserTopArtists: Codable {
    var href: String
    var items: [ArtistObject]
}

struct UserTopTracks: Codable {
    var href: String
    var items: [TrackObject]
}

struct Error: Codable {
    var status: Int
    var message: String
}

struct Genres: Codable {
    var genres: [String]
}

class APICalls: ObservableObject {
    let token = "BQCyuZDEVZB9C-DKa_PcDx7NXvF6FdMMeCIDW8muToKHf4LsN2-VVUGXUlthQcVHNGVINIr3kOvRwcESg52AN93loJyF-EncgVmRWh3n0C8jkc-UqBqKD_EzQOaYurVqApAwG3uH8Di8ayjwClBqbY7aMFBVd_TZX_zy4TnrAzGZtSzZk92ixkhMR5sTie-pLRnINUgIOn2wA3SR-SKwBLOwOq_iGX38yWpx2paE9Jwy1MLrMAj_GAPu73ExZeYfC_hx"
    
    // updated in StartWorkoutView
    @Published var minBPM = ""
    @Published var maxBPM = ""
    @Published var workoutTime = ""
    
    // gathered from user data, generated by getTop endpoint
    var seedArtists: [ArtistObject]?
    var seedTracks: [TrackObject]?
    var seedGenres: [String]?
    

    // generates seed artists for getRecommendations endpoint based on users top artists
    func generateSeedArtists() {
        guard let url = URL(string: "https://api.spotify.com/v1/me/top/artists") else { return }
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        let task = URLSession.shared.dataTask(with: request) {data, response, error in
            
            // print out data for debugging purposes
            if let data = data {
                if let dataString = String(data: data, encoding: .utf8) {
                    print("got dataString: \n\(dataString)")
                }
            }
            
            guard let data = data, error == nil else {
                print("Error: \(error?.localizedDescription ?? "Unknown error")")
                return
            }
            
            if let response = response as? HTTPURLResponse {
                if (response.statusCode == 200) {
                    // assigns response JSON to UserTopArtists struct
                    guard let topArtists = try? JSONDecoder().decode(UserTopArtists.self, from: data) else {
                        print("Error Decoding Top Artist Details from JSON")
                        return
                    }
                    self.seedArtists = topArtists.items
                    
                } else if (response.statusCode == 401) {
                    AuthorizationManager.authManager.refreshAuthentication()
                    // self.generateSeedArtists()
                } else {
                    guard let errorInfo = try? JSONDecoder().decode(Error.self, from: data) else {
                        print("Error decoding error message details from JSON")
                        return
                    }
                    print (errorInfo.message)
                }
            }
        }
        task.resume()
    }

    // generates seed tracks for getRecommendations endpoint based on users top tracks
    func generateSeedTracks() {
        guard let url = URL(string: "https://api.spotify.com/v1/me/top/tracks") else { return }
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        let task = URLSession.shared.dataTask(with: request) {data, response, error in
            
            // print out data for debugging purposes
            if let data = data {
                if let dataString = String(data: data, encoding: .utf8) {
                    print("got dataString: \n\(dataString)")
                }
            }
            
            guard let data = data, error == nil else {
                print("Error: \(error?.localizedDescription ?? "Unknown error")")
                return
            }
            
            if let response = response as? HTTPURLResponse {
                if (response.statusCode == 200) {
                    // assigns response JSON to UserTopArtists struct
                    guard let topTracks = try? JSONDecoder().decode(UserTopTracks.self, from: data) else {
                        print("Error Decoding Top Track Details from JSON")
                        return
                    }
                    self.seedTracks = topTracks.items
                    
                } else if (response.statusCode == 401) {
                    AuthorizationManager.authManager.refreshAuthentication()
                    // self.generateSeedArtists()
                } else {
                    guard let errorInfo = try? JSONDecoder().decode(Error.self, from: data) else {
                        print("Error decoding error message details from JSON")
                        return
                    }
                    print (errorInfo.message)
                }
            }
        }
        task.resume()
    }
    
    
    func generateSeedGenres() {
        guard let url = URL(string: "https://api.spotify.com/v1/recommendations/available-genre-seeds") else { return }
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        let task = URLSession.shared.dataTask(with: request) {data, response, error in
              
            // print out data for debugging purposes
            if let data = data {
                if let dataString = String(data: data, encoding: .utf8) {
                    print("got dataString: \n\(dataString)")
                }
            }
              
            guard let data = data, error == nil else {
                print("Error: \(error?.localizedDescription ?? "Unknown error")")
                return
            }
              
            if let response = response as? HTTPURLResponse {
                if (response.statusCode == 200) {
                      // assigns response JSON to UserTopArtists struct
                    guard let genreArray = try? JSONDecoder().decode(Genres.self, from: data) else {
                        print("Error Decoding Top Track Details from JSON")
                        return
                    }
                    self.seedGenres = genreArray.genres
                    
                } else if (response.statusCode == 401) {
                AuthorizationManager.authManager.refreshAuthentication()
                    // self.generateSeedArtists()
                } else {
                    guard let errorInfo = try? JSONDecoder().decode(Error.self, from: data) else {
                        print("Error decoding error message details from JSON")
                        return
                    }
                    print (errorInfo.message)
                }
            }
        }
        task.resume()
    }

    func getSongRecommendation(){
        // Generate these using the users top artsists genres and tracks (call this endpoints first!) might have to cash these also
        guard let url = URL(string: "https://api.spotify.com/v1/recommendations/available-genre-seeds") else { return }
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.addValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        
        var bodyComponents = URLComponents()
        bodyComponents.queryItems = [// body
            URLQueryItem(name: "seed_artists", value: seedArtists),
            URLQueryItem(name: "seed_genres", value: seedGenres),
            URLQueryItem(name: "seed_tracks", value: seedTracks)
            URLQueryItem(name: "min_tempo", value: minBPM),
            URLQueryItem(name: "max_tempo", value: maxBPM)
        ]

        guard let body = bodyComponents.query?.data(using: .utf8) else { return }
    }
    
    func createPlaylist() {
        
    }
    
    // when workout started, play playlist
    func playSong() {
        
    }
    
    // when workout ended, end playlist
    func endSong() {
        
    }
    
    // invoked if user agrees to save playlist to libary
    func savePlaylistToLibrary() {
        
    }
}
